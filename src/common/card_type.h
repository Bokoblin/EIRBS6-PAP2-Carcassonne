#ifndef CARD_TYPE_DEF_H
#define CARD_TYPE_DEF_H

#include "interface.h"
#include "area_type.h"

#define MAX_ZONES 13
#define MAX_SIDE_ZONES 12
#define FIRST_CARD_ID CARD_ROAD_STRAIGHT_CITY

////////////////////////////////////////////////////////////////////
///     STRUCTURE
////////////////////////////////////////////////////////////////////

/**
 * @brief card_type
 * Describes the card of that type
 */
struct card_type
{
    enum card_id id;
    enum area_type areas[MAX_ZONES];
};


////////////////////////////////////////////////////////////////////
///     STATIC ARRAY
////////////////////////////////////////////////////////////////////

/**
 * @brief definition of all areas for each card id
 * @example { CARD_ID, { NE, N, NW, WN, W, WS, SW, S, SE, ES, E, EN, CENTER }}
 */
static const struct card_type card_types[LAST_CARD+1] = {
    {CARD_MONASTERY_ROAD,       {FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, ABBEY}},
    {CARD_MONASTERY_ALONE,      {FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, ABBEY}},
    {CARD_CITY_ALL_SIDES,       {CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY, CITY}},
    {CARD_ROAD_STRAIGHT_CITY,   {FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, CITY, CITY, CITY, ROAD}},
    {CARD_CITY_ONE_SIDE,        {CITY, CITY, CITY, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD}},
    {CARD_CITY_TUNNEL_SHLD,     {FIELD, FIELD, FIELD, CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY, CITY, CITY, CITY}},
    {CARD_CITY_TUNNEL,          {CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY}},
    {CARD_PLAIN_TUNNEL,         {FIELD, FIELD, FIELD, CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY, CITY, CITY, FIELD}},
    {CARD_PLAIN_TWO_CITIES,     {FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, CITY, CITY, CITY, CITY, CITY, CITY, FIELD}},
    {CARD_ROAD_TURN_RIGHT_CITY, {CITY, CITY, CITY, FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD}},
    {CARD_ROAD_TURN_LEFT_CITY,  {FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, CITY, CITY, CITY, FIELD}},
    {CARD_JUNCTION_CITY,        {FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, CITY, CITY, CITY, INTERSECTION}},
    {CARD_PLAIN_CITY_SHLD,      {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD}},
    {CARD_PLAIN_CITY,           {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD, FIELD}},
    {CARD_PLAIN_CITY_ROAD_SHLD, {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD}},
    {CARD_PLAIN_CITY_ROAD,      {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD}},
    {CARD_CITY_THREE_SHLD,      {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY, CITY, CITY, CITY}},
    {CARD_CITY_THREE,           {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, FIELD, FIELD, CITY, CITY, CITY, CITY}},
    {CARD_CITY_THREE_ROAD_SHLD, {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, ROAD, FIELD, CITY, CITY, CITY, CITY}},
    {CARD_CITY_THREE_ROAD,      {CITY, CITY, CITY, CITY, CITY, CITY, FIELD, ROAD, FIELD, CITY, CITY, CITY, CITY}},
    {CARD_ROAD_STRAIGHT,        {FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, ROAD}},
    {CARD_ROAD_TURN,            {FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, FIELD, FIELD, ROAD}},
    {CARD_JUNCTION_THREE,       {FIELD, FIELD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, INTERSECTION}},
    {CARD_JUNCTION_FOUR,        {FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, FIELD, ROAD, FIELD, INTERSECTION}},
    {LAST_CARD,                 {INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA,
                                INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA, INVALID_AREA}}
};

#endif
